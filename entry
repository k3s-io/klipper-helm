#!/bin/bash

set -e -v
eval set -- $(sed -e "s/%{KUBERNETES_API}%/${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/g" <<< "${@@Q}")
set +v -x

cp /var/run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
update-ca-certificates
generate_kubeconfig

# migrate old releases from v2 to v3
#
helm 2to3 convert --delete-v2-releases -s secrets $NAME

# adding stable repo since, stable is removed in v3
helm repo add stable https://kubernetes-charts.storage.googleapis.com/
helm repo update
if [ -n "$REPO" ]; then
    helm repo add ${NAME%%/*} $REPO
    helm repo update
fi

JQ_CMD='"\(.[0].app_version),\(.[0].status)"'
LINE="$(helm ls --all -f "^$NAME\$" --output json | jq -r "$JQ_CMD")"
INSTALLED_VERSION=$(echo $LINE | cut -f1 -d,)
STATUS=$(echo $LINE | cut -f2 -d,)

if [ -e /config/values.yaml ]; then
    VALUES="--values /config/values.yaml"
fi

if [ "$1" = "uninstall" ]; then
    if [ -z "$INSTALLED_VERSION" ]; then
        exit
    fi
    helm "$@"
    exit
fi

if [ -z "$INSTALLED_VERSION" ] && [ -z "$STATUS" ]; then
    helm "$@" $VALUES
    exit
fi
if [ -z "$VERSION" ] || [ "$INSTALLED_VERSION" = "$VERSION" ]; then
    if [ "$STATUS" = "deployed" ]; then
        echo Already installed $NAME, upgrading
        # We assume the args are always install foo CHART
        shift 2
        helm upgrade $NAME "$@" $VALUES
        exit
    fi
fi

if [ "$STATUS" = "failed" ] || [ "$STATUS" = "deleted" ]; then
    helm uninstall $NAME
    echo Uninstalled
    helm "$@" $VALUES
    exit
fi

# We assume the args are always install --name foo CHART
helm "$@" $VALUES

func generate_kubeconfig {
  mkdir ~/.kube/
  TOKEN=$(cat var/run/secrets/kubernetes.io/serviceaccount/token)
  echo "
apiVersion: v1
kind: Config
clusters:
- name: default
  cluster:
    insecure-skip-tls-verify: true
    server: ${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}
contexts:
- name: default
  context:
    cluster: default
    namespace: default
    user: default
current-context: default
users:
- name: default
  user:
    token: ${TOKEN}
" > ~/.kube/config
}