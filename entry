#!/bin/bash

helm_update() {
	if [[ "${HELM}" == "helm_v3" ]]; then
		LINE="$(${HELM} ls --all -f "^${NAME}\$" --namespace ${TARGET_NAMESPACE} --output json | jq -r "${JQ_CMD}" | tr '[:upper:]' '[:lower:]')"
	else
		LINE="$(${HELM} ls --all "^${NAME}\$" --output json | jq -r "${JQ_CMD}" | tr '[:upper:]' '[:lower:]')"
	fi
	IFS=, read -r INSTALLED_VERSION STATUS _ <<<${LINE}
	VALUES=""

	for VALUES_FILE in /config/*.yaml; do
		VALUES="${VALUES} --values ${VALUES_FILE}"
	done

	# Uninstall or delete chart if asked to delete and the chart was found; otherwise no-op
	if [[ "$1" = "delete" ]]; then
		if [[ -z "${INSTALLED_VERSION}" ]]; then
			exit
		fi
		if [[ "${HELM}" == "helm_v3" ]]; then
			${HELM} uninstall ${NAME} --namespace ${TARGET_NAMESPACE} || true
		else
			${HELM} delete ${NAME} || true
			${HELM} "$@" --purge ${NAME}
		fi
		exit
	fi

	# No current version and status, safe to install
	if [[ "${INSTALLED_VERSION}" =~ ^(|null)$ ]] && [[ "${STATUS}" =~ ^(|null)$ ]]; then
		${HELM} "$@" ${NAME_ARG} ${NAME} ${CHART} ${TIMEOUT_ARG} ${VALUES}
		exit
	fi

	# If a previous helm_v3 operation was interrupted unexpectedly, set it to failed.
	if [[ "${STATUS}" =~ ^(pending-install|pending-upgrade|pending-rollback)$ ]] && [[ "${HELM}" == "helm_v3" ]]; then
		echo Previous helm job was interrupted, updating status from ${STATUS} to failed
		${HELM} set-status ${NAME} failed --namespace ${TARGET_NAMESPACE}

		# Upgrades can be retried; install and rollback will be handled as failure below.
		# If this upgrade also fails, retries of the job will handle that as failure due to the release state change.
		if [[ "${STATUS}" == "pending-upgrade" ]]; then
			echo "Retrying upgrade of ${NAME}"
			shift 1
			${HELM} upgrade "$@" ${NAME} ${CHART} ${TIMEOUT_ARG} ${VALUES}
			exit
		else
			STATUS=failed
		fi
	fi

	# Upgrade only if the chart is already deployed
	if [[ "${STATUS}" == "deployed" ]]; then
		echo "Already installed ${NAME}"
		if [[ "${HELM}" == "helm_v3" ]]; then
			${HELM} mapkubeapis ${NAME} --namespace ${TARGET_NAMESPACE}
		else
			${HELM} mapkubeapis ${NAME} --v2
		fi

		echo "Upgrading ${NAME}"
		shift 1
		${HELM} upgrade "$@" ${NAME} ${CHART} ${TIMEOUT_ARG} ${VALUES}
		exit
	fi

	# The chart is in a bad state; try uninstalling it first
	if [[ "${STATUS}" =~ ^(deleted|failed|null|unknown)$ ]]; then
		if [[ "${HELM}" == "helm_v3" ]]; then
			${HELM} uninstall ${NAME} --namespace ${TARGET_NAMESPACE}
		else
			${HELM} "$@" --purge ${NAME}
		fi
		echo Deleted
		# Try installing now that we've uninstalled
		${HELM} "$@" ${NAME_ARG} ${NAME} ${CHART} ${TIMEOUT_ARG} ${VALUES}
		exit
	fi

	# No special status handling necessary, do whatever we were asked to do
	${HELM} "$@" ${NAME_ARG} ${NAME} ${CHART} ${TIMEOUT_ARG} ${VALUES}
}

helm_repo_init() {
	# if the chart is url skip repo update
	if grep -q -e "https\?://" <<< "${CHART}"; then
		echo "chart path is a url, skipping repo update"
		${HELM} repo remove stable || true
		return
	fi

	if [[ "${HELM}" == "helm_v3" ]]; then
		if [[ ${CHART} == stable/* ]]; then
			${HELM} repo add stable ${STABLE_REPO_URL}
			${HELM} repo update
		fi
	else
		${HELM} repo update --strict || ${HELM} repo remove stable
	fi

	if [[ -n "${REPO}" ]]; then
		${HELM} repo add ${NAME%%/*} ${REPO}
		${HELM} repo update
	fi
}

helm_content_decode() {
	set -e
	ENC_CHART_PATH="/chart/${NAME}.tgz.base64"
	CHART_PATH="/tmp/${NAME}.tgz"
	if [[ ! -f "${ENC_CHART_PATH}" ]]; then
		return
	fi
	base64 -d ${ENC_CHART_PATH} > ${CHART_PATH}
	CHART=${CHART_PATH}
	set +e
}

export SSL_CERT_FILE=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
export SSL_CERT_DIR=/etc/ssl/certs
export HELM_TLS_CA_CERT=${SSL_CERT_FILE}
HELM="helm_v3"
NAME_ARG=""
TIMEOUT_ARG=""
JQ_CMD='"\(.[0].app_version),\(.[0].status)"'

set -e -v
CHART="${CHART//%\{KUBERNETES_API\}%/${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}}"
set +v -x

if [[ "${BOOTSTRAP}" != "true" ]]; then
	tiller --listen=127.0.0.1:44134 --storage=secret &
	export HELM_HOST=127.0.0.1:44134

	helm_v2 init --skip-refresh --client-only --stable-repo-url ${STABLE_REPO_URL}
	V2_CHART_EXISTS=$(helm_v2 ls --all "^${NAME}\$" --output json | jq -r '.Releases | length')
fi

if [[ "${V2_CHART_EXISTS}" == "1" ]] || [[ "${HELM_VERSION}" == "v2" ]]; then
	if [[ "${BOOTSTRAP}" == "true" ]]; then
		echo "Error: bootstrap flag can't be set with helm version 2 charts, please remove the bootstrap flag and update the chart"
		exit 1
	fi
	HELM="helm_v2"
	NAME_ARG="--name"
	JQ_CMD='"\(.Releases[0].AppVersion),\(.Releases[0].Status)"'
fi

if [[ -n "${TIMEOUT}" ]]; then
	if [[ "${HELM}" == "helm_v3" ]]; then
		TIMEOUT_ARG="--timeout ${TIMEOUT}"
	else
		echo "Warning: timeout flag can't be set with version 2 charts, using default timeout"
	fi
fi

shopt -s nullglob

helm_content_decode
if [[ "$1" != "delete" ]]; then
	helm_repo_init
fi
helm_update "$@"

