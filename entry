#!/bin/bash

helm_update() {
	if [ "$HELM" == "helm_v3" ]; then
		LINE="$($HELM ls -f "^$NAME\$" --namespace $TARGET_NAMESPACE --output json | jq -r "$JQ_CMD" | tr '[:upper:]' '[:lower:]')"
	else
		LINE="$($HELM ls --all "^$NAME\$" --output json | jq -r "$JQ_CMD" | tr '[:upper:]' '[:lower:]')"
	fi
	INSTALLED_VERSION=$(echo $LINE | cut -f1 -d,)
	STATUS=$(echo $LINE | cut -f2 -d,)
	VALUES=""

	for VALUES_FILE in /config/*.yaml; do
		VALUES="$VALUES --values $VALUES_FILE"
	done

	if [ "$1" = "delete" ]; then
		if [ -z "$INSTALLED_VERSION" ]; then
			exit
		fi
		if [ "$HELM" == "helm_v3" ]; then
			$HELM uninstall $NAME --namespace $TARGET_NAMESPACE|| true
		else
			$HELM delete $NAME || true
			$HELM "$@" --purge $NAME
		fi
		exit
	fi

	if [ -z "$INSTALLED_VERSION" ] && [ -z "$STATUS" ]; then
		$HELM "$@" $NAME_ARG $NAME $CHART $VALUES
		exit
	fi

	# Upgrade only if the status is already deployed
	if [ "$STATUS" = "deployed" ]; then
		echo Already installed $NAME, upgrading
		shift 1
		$HELM upgrade "$@" $NAME $CHART $VALUES
		exit
	fi

	if [ "$STATUS" = "failed" ] || [ "$STATUS" = "deleted" ]; then
		if [ "$HELM" == "helm_v3" ]; then
			$HELM uninstall $NAME --namespace $TARGET_NAMESPACE
		else
			$HELM "$@" --purge $NAME
		fi
		echo Deleted
		$HELM "$@" $NAME_ARG $NAME $CHART $VALUES
		exit
	fi

	$HELM "$@" $NAME_ARG $NAME $CHART $VALUES
}

helm_repo_init() {
	# if the chart is url skip repo update
	if grep -q -e "https\?://" <<< "$CHART"; then
		echo "chart path is a url, skipping repo update"
		$HELM repo remove stable || true
		return
	fi

	if [ "$HELM" == "helm_v3" ]; then
		if [[ $CHART == stable/* ]]; then
			$HELM repo add stable https://charts.helm.sh/stable
			$HELM repo update
		fi
	else
		$HELM repo update --strict || $HELM repo remove stable
	fi

	if [ -n "$REPO" ]; then
		$HELM repo add ${NAME%%/*} $REPO
		$HELM repo update
	fi
}

helm_content_decode() {
	set -e
	ENC_CHART_PATH="/chart/${NAME}.tgz.base64"
	CHART_PATH="/${NAME}.tgz"
	if [ ! -f "${ENC_CHART_PATH}" ]; then
		return
	fi
	cat ${ENC_CHART_PATH} | base64 -d > ${CHART_PATH}
	CHART=${CHART_PATH}
	set +e
}

HELM="helm_v3"
NAME_ARG=""
JQ_CMD='"\(.[0].app_version),\(.[0].status)"'

set -e -v
CHART=$(sed -e "s/%{KUBERNETES_API}%/${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/g" <<< "${CHART}")
set +v -x

cp /var/run/secrets/kubernetes.io/serviceaccount/ca.crt /usr/local/share/ca-certificates/
update-ca-certificates

if [ "$BOOTSTRAP" != "true" ]; then
  tiller --listen=127.0.0.1:44134 --storage=secret &
  export HELM_HOST=127.0.0.1:44134

  helm_v2 init --skip-refresh --client-only
  EXIST=$(helm_v2 ls --all "^$NAME\$" --output json | jq -r '.Releases | length')
fi

if [ "$EXIST" == "1" ] || [ "$HELM_VERSION" == "v2" ]; then
  if [ "$BOOTSTRAP" == "true" ]; then
    echo "Error: bootstrap flag can't be set with helm version 2 charts, please remove the bootstrap flag and update the chart"
    exit 1
  fi
	HELM="helm_v2"
	NAME_ARG="--name"
	JQ_CMD='"\(.Releases[0].AppVersion),\(.Releases[0].Status)"'
fi

shopt -s nullglob

helm_content_decode
if [ "$1" != "delete" ]; then
  helm_repo_init
fi
helm_update $@

